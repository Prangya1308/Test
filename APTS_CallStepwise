/**
 * @description This class is used to call Stepwise Using Proxy generated by CBC. Reuses code by Cloud Sherpa
 * @author Shravan Shirumalla
 * @company Apttus
 * @date 10/10/2016
 */
public without sharing class APTS_CallStepwise {
    private ID proposalID;
    private SW_Response__c swResponse = null;
    private ID proposalIDForCensus;
    public class APTSException extends Exception { }
    private Map<String, String> LevelofCoverage = new Map<String, String> { 'SUBSCRIBER' => 'Sngl',
        'SUBSCRIBER & SPOUSE' => 'HW',
        'SUBSCRIBER & CHILD' => 'PC',
        'SUBSCRIBER & CHILDREN' => 'PCn',
        'FAMILY' => 'Fam',
        'SPOUSE ONLY' => 'Spouse',
        'SPOUSE' => 'Spouse',
        'CHILD' => 'Child' };
    private Map<String, String> GroupMSPSizeMap = new Map<String, String> { '1 - 19' => '1',
        '20 - 99' => '20',
        '100 Plus' => '100',
        '1' => '1',
        '20' => '20',
        '100' => '100' };
    private Set<String> medicareEligibleReasonSet = new Set<String> { 'collapse',
        'Age',
        'Disability',
        'ESRD',
        'Unknown' };
    Map<String, Id> lineItemToFacetsProdId = new Map<String, Id> ();
    Set<String> planidSet = new Set<String> ();
    public APTS_CallStepwise() {
        System.debug('In APTS_CallStepwise constructor.');
    }
    public Apttus_Proposal__Proposal__c getGroupRate(ID proposalID, ID configurationID, String swQuoteType, boolean ignoreSWError) {
        System.debug('In getGroupRate proposalID = ' + proposalID + ', configurationID=' + configurationID);
        If (proposalID == null || configurationID == null) {
            throw new APTSException('Invalid parameters to SW API proposalID = ' + proposalID +
                                    ', configurationID = ' + configurationID);
        }
        DateTime completeStartTime = Datetime.now();
        String transactionId = ('TX-' + proposalID + System.now().format('-MM/dd/yyyyHH:mm:ss.SSS')).replaceAll('(\\s+)', '');
        //Query Objects.
        Apttus_Proposal__Proposal__c proposalObj = getProposalDetails(proposalID);
        if (proposalObj.SW_Quote_Id__c == null &&
            proposalObj.Prior_Quote__c != null) {
            //set prior fields from prior Quote lookup field when calling SW first time
            proposalObj.Prior_Exchange_Indicator__c = proposalObj.Prior_Quote__r.Exchange__c;
            proposalObj.Prior_Segment_Name__c = proposalObj.Prior_Quote__r.Segment__c;
            proposalObj.Prior_Effective_Date__c = proposalObj.Prior_Quote__r.Effective_Date__c;
            proposalObj.Prior_Group_County__c = proposalObj.Prior_Quote__r.Apttus_Proposal__Account__r.ShippingCounty__c;
            proposalObj.Prior_Group_SIC__c = proposalObj.Prior_Quote__r.Apttus_Proposal__Account__r.Sic;
            proposalObj.Prior_Group_MSPSize__c = proposalObj.Prior_Quote__r.MSP_Employer_Size__c;
            if (proposalObj.Prior_Quote__r.Census__c != null) {
                proposalObj.Prior_Census_Name__c = proposalObj.Prior_Quote__r.Census__r.Census_Name__c;
            } else {
                proposalObj.Prior_Census_Name__c = proposalObj.Prior_Quote__r.Prior_Census_Name__c;
            }
        }
        List<Census_Member__c> censusMemberList = getCensusMembers(proposalObj.Census__c, proposalObj);
        List<Apttus_Config2__LineItem__c> lineItemList = getLineItems(configurationID);
        if (lineItemList.size() == 0) {
            List<RecordType> recodTypeList = [SELECT Id FROM RecordType where Name = 'Proposal - Clone Locked'];
            proposalObj.RecordTypeId = recodTypeList[0].Id;
            //proposalObj.Cloned_Quote__c = false;
            update proposalObj;
            throw new APTSException('There are no products to price. Use the "Finalize" button to complete your request. Rates are not needed when cancelling a product.');
        }
        /* String duplicateProductCode = checkDuplicateProductExist(lineItemList);
          if (duplicateProductCode.length() > 0) {
          throw new APTSException('There are duplicate products in the cart. Please remove one of them. Duplicate Products are ' + duplicateProductCode);
          }*/
        proposalIDForCensus = proposalID;
        //Populate Service Request Object
        InsuranceRates.QuoteHeader quoteHeader = getHeaderDetails(proposalObj, swQuoteType);
        InsuranceRates.GroupInfo groupInfo = getGroupDetails(proposalObj);
        List<InsuranceRates.Product> productList = getProductDetails(lineItemList, proposalObj);
        InsuranceRates.CensusInfo censusInfo = getCensusInfo(proposalObj);
        List<InsuranceRates.CensusItem> censusItemList = getCensusDetails(censusMemberList, proposalObj);
        InsuranceRates insuranceRates = new InsuranceRates(quoteHeader, groupInfo, censusInfo, productList, censusItemList);
        String JSONRequest = JSON.serializePretty(insuranceRates);
        System.debug('JSONRequest  ' + JSONRequest);
        System.debug('Step 1');
        InsuranceRatesV20_WS_Client.WebServiceResults webServiceResults = null;
        DateTime startTime = Datetime.now();
        String JSONRequestHTML = '';
        String JSONResponseHTML = '';
        String JSONResponse = '';
        System.debug('Step 2');
        try {
            System.debug('Step 3');
            if (!Test.isRunningTest()) {
                webServiceResults = InsuranceRatesV20_WS_Client.getHealthInsuranceRateInfo(insuranceRates, transactionId);
            }
            System.debug('Step 4');
        } catch(Exception ex) {
            System.debug('>> Exception: ' + ex.getMessage());
            System.debug('Step 5');
            proposalObj.Renewal_Detail_Error_Message__c = ex.getMessage() + '<br/> TransactionId = ' + transactionId;
            update proposalObj;
            sendSystemLevelErorMail(proposalObj);
            System.debug('Step 6');
            String responseError = JSON.serializePretty('Error Message *****' + ex.getMessage() + ex.getLineNumber() + ex.getCause());
            //Ashish
            id swRespId = insertSWResponseError(transactionId, startTime, configurationID, false);
            //insertResquestResponse(swRespId, JSONRequest, responseError);
            JSONRequestHTML = replaceString(JSONRequest, '\n', '<BR/>');
            JSONRequestHTML = replaceString(JSONRequestHTML, '\\B(<BR/>)+\\B', '<BR/>');
            System.debug('Step 7 ');
            throw new APTSException(ex.getMessage() + '<br/> TransactionId = ' + transactionId); //+
            // '<BR/>' + JSONRequestHTML);
        }
        DateTime endTime = Datetime.now();
        Decimal timeTakenForResponse = (endTime.getTime() - startTime.getTime()) / 1000.0;
        System.debug('>> Time taken: ' + timeTakenForResponse + ' seconds.');
        System.debug('Step 8');
        Apttus_Proposal__Proposal__c updatedProposalObj;
        if (webServiceResults != null) {
            System.debug('Step 9');
            System.debug(LoggingLevel.DEBUG, '\n\nwebServiceResults: ' + JSON.serializePretty(webServiceResults));
            System.debug(LoggingLevel.DEBUG, '\n\ninsuranceRates: ' + JSON.serializePretty(insuranceRates));
            JSONResponse = JSON.serializePretty(insuranceRates);
            System.debug('JSONResponse ' + JSONResponse);
            JSONResponseHTML = replaceString(JSONResponse, '\n', '<BR/>');
            JSONResponseHTML = replaceString(JSONResponseHTML, '\\B(<BR/>)+\\B', '<BR/>');
            //Parse Response
            System.debug('Step 10');
            try {
                System.debug('Step 11');
                updatedProposalObj = parseResponse(proposalObj, lineItemList, webServiceResults, insuranceRates, timeTakenForResponse,
                                                   configurationID, ignoreSWError);
                System.debug('Step 12');
            } catch(Exception ex) {
                proposalObj.Renewal_Detail_Error_Message__c = ex.getMessage() + '<br/> TransactionId = ' + transactionId;
                update proposalObj;
                System.debug('>> Exception in parsing Response : ' + ex.getMessage());
                System.debug('Step 13');
                Id parentID = (swResponse == null) ? insertSWResponseError(transactionId, startTime, configurationID, false) : swResponse.ID;
                String responseError = JSON.serializePretty('Error Message *****' + ex.getMessage() + ex.getLineNumber() + ex.getCause() + '<br/>' + insuranceRates);
                //Ashish
                //insertResquestResponse(parentID, JSONRequest, responseError);
                System.debug('Step 14');
                throw new APTSException(ex.getMessage() + '<br/> TransactionId = ' + transactionId); //+
                //   'Request :<BR/>' + JSONRequestHTML +
                //  '<BR/>Response :<BR/>' + JSONResponseHTML);
            }
            System.debug('Step 15');
            Id parentID = (swResponse == null) ? configurationID : swResponse.ID;
            //insertResquestResponse(parentID, JSONRequest, JSONResponse);
            System.debug('Step 16');
        } else {
            System.debug('Step 17');
            System.debug('>> Error: Null Response.');
            proposalObj.Renewal_Detail_Error_Message__c = 'Error : No Response from Stepwise. <br/> TransactionId = ' + transactionId;
            update proposalObj;
            Id parentID = (swResponse == null) ? insertSWResponseError(transactionId, startTime, configurationID, true) : swResponse.ID;
            //insertResquestResponse(parentID, JSONRequest, null);
            JSONResponse = JSON.serializePretty(insuranceRates);
            JSONResponseHTML = replaceString(JSONResponse, '\n', '<BR/>');
            JSONResponseHTML = replaceString(JSONResponseHTML, '\\B(<BR/>)+\\B', '<BR/>');
            System.debug('Step 18 JSONResponseHTML  ' + JSONResponseHTML);
            throw new APTSException('Error : No Response from Stepwise. <br/> TransactionId = ' + transactionId); //+
            //    '<BR/>' + JSONRequestHTML);
        }
        endTime = Datetime.now();
        Decimal timeTakenForCompleteResponse = (endTime.getTime() - completeStartTime.getTime()) / 1000.0;
        System.debug('>> Time taken for complete : ' + timeTakenForCompleteResponse + ' seconds.');
        return updatedProposalObj;
    }
    public String replaceString(String inputStr, String regexString, String replaceStr) {
        String newStr = '';
        Integer startCt = 0;
        Integer endCt = 0;
        Integer indexInt;
        do {
            endCt = startCt + 100000;
            indexInt = inputStr.indexOf('\n', endCt);
            if (indexInt != - 1) {
                endCt = indexInt;
            }
            if (endCt > inputStr.length()) {
                endCt = inputStr.length();
            }
            newStr += inputStr.subString(startCt, endCt).replaceAll(regexString, replaceStr);
            startCt = endCt;
        } while (startCt<inputStr.length());
        return newStr;
    }
    //Check if duplicate products are in card
    /*  public String checkDuplicateProductExist(List<Apttus_Config2__LineItem__c> lineItemList) {
      String duplicateProduct = '';
      Map<String, String> productCodeMap = new Map<String, String>();
      Map<String, String> duplicateProductCodeMap = new Map<String, String>();
      for (Apttus_Config2__LineItem__c lineItem : lineItemList) {
      String configType = lineItem.Apttus_Config2__ProductId__r.Apttus_Config2__ConfigurationType__c;
      System.debug('configType ' + configType);
      if (lineItem.Apttus_Config2__LineType__c == 'Product/Service' && (configType == 'Bundle' || configType == 'Standalone')) {
      System.debug('lineItem.Apttus_Config2__ProductId__r.ProductCode ' + lineItem.Apttus_Config2__ProductId__r.ProductCode);
      if (productCodeMap.containsKey(lineItem.Apttus_Config2__ProductId__r.ProductCode)) {
      duplicateProductCodeMap.put(lineItem.Apttus_Config2__ProductId__r.Name, lineItem.Apttus_Config2__ProductId__r.Name);
      } else {
      productCodeMap.put(lineItem.Apttus_Config2__ProductId__r.ProductCode, lineItem.Apttus_Config2__ProductId__r.ProductCode);
      }
      }
      }
      List<String> dupProductList = duplicateProductCodeMap.values();
      if (dupProductList.size() > 0) {
      for (String dupProduct : dupProductList) {
      duplicateProduct += dupProduct + ';';
      }
      }
      return duplicateProduct;
      }*/
    public void setProposalPriorFields(Apttus_Proposal__Proposal__c proposalObj) {
        Apttus_Proposal__Proposal__c proposalObj1 = getProposalDetails(proposalObj.Id);
        //System.debug('Got details ' + proposalObj.Census__r.Census_Name__c);
        proposalObj.Prior_Exchange_Indicator__c = proposalObj1.Exchange__c;
        proposalObj.Prior_Segment_Name__c = proposalObj1.Segment__c;
        proposalObj.Prior_Effective_Date__c = proposalObj1.Effective_Date__c;
        proposalObj.Prior_Group_County__c = proposalObj1.Apttus_Proposal__Account__r.ShippingCounty__c;
        proposalObj.Prior_Group_SIC__c = proposalObj1.SIC_Code__c;
        proposalObj.Prior_Group_MSPSize__c = GroupMSPSizeMap.get(proposalObj1.MSP_Employer_Size__c);
        if (proposalObj1.Census__c != null) {
            proposalObj.Prior_Census_Name__c = proposalObj1.Census__r.Census_Name__c;
        }
        System.debug('Update Proposal Prior Fields:' + proposalObj);
    }
    public Apttus_Proposal__Proposal__c getProposalDetails(ID proposalID) {
        System.debug('In getProposalDetails proposalID:' + proposalID);
        Apttus_Proposal__Proposal__c proposalObj =
        [Select ID, Name,
        //Header
        Segment__c,
        Exchange__c,
        Quote_Type__c,
        Effective_Date__c,
        GRA__c,
        Plan_Year__c,
        SW_Quote_Id__c,
        SW_Iteration_No__c,
        SW_Quote_Status__c,
        census_Variance_Factor__c,
        Census_Variance_Applied__c,
        script_Check_Variance_Applied__c,
        script_Check_Variance_Factor__c,
        Apttus_Proposal__Account__r.Name,
        Apttus_Proposal__Account__r.GroupNumber__c, //Group number
        //Group__r.Renewal_Stage_Indicator__c,
        MSP_Employer_Size__c,
        Apttus_Proposal__Approval_Stage__c,
        Cloned_Quote__c,
        SIC_Code__c,
        //Prior
        Prior_Quote__c,
        Prior_Quote__r.Exchange__c,
        Prior_Quote__r.Segment__c,
        Prior_Quote__r.Effective_Date__c,
        Prior_Quote__r.Apttus_Proposal__Account__r.ShippingCounty__c,
        Prior_Quote__r.Apttus_Proposal__Account__r.Sic,
        Prior_Quote__r.MSP_Employer_Size__c,
        Prior_Quote__r.Census__c,
        Prior_Quote__r.Census__r.Census_Name__c,
        Prior_Quote__r.Prior_Census_Name__c,
        Prior_Exchange_Indicator__c,
        Renewal_Stage_Indicator__c,
        Prior_Segment_Name__c,
        Prior_Effective_Date__c,
        Prior_Group_County__c,
        Prior_Group_SIC__c,
        Prior_Group_MSPSize__c,
        Prior_Census_Name__c,
        //Source_Quote_Id__c,
        //Source_Quote_Number__c,
        //Source_System_Status__c, -- replaced with SW_Quote_Status__c
        //Group
        Apttus_Proposal__Account__c,
        Apttus_Proposal__Account__r.ShippingState,
        Apttus_Proposal__Account__r.ShippingPostalCode,
        Apttus_Proposal__Account__r.ShippingCounty__c,
        Apttus_Proposal__Account__r.Sic,
        Apttus_Proposal__Account__r.Prospect_Id__c,
        //Apttus_Proposal__Account__c.MSP_Employer_Size__c,
        //Census
        Census__c,
        Census__r.Status__c,
        Census__r.Percentage_Authorization__c, //groupPctAuths
        Census__r.Census_Name__c,
        Census__r.Compliance__c,
        Census__r.Size__c,
        Census__r.Total_Subscribers__c,
        //S360
        Sales360_Quote_ID__c,
        Batch__c
        From Apttus_Proposal__Proposal__c
        Where ID = : proposalID
        ];
        System.debug('End getProposalDetails proposalObj:' + proposalObj);
        return proposalObj;
    }
    public void insertResquestResponse(ID parentID, String request, String response) {
        if (parentID == null) return;
        System.debug('Inside insertResquestResponse.');
        //Attachment attachment;
        //List<Attachment> attachmentList = new List<Attachment> ();
        List<ContentVersion> conVerList= new List<ContentVersion>();
        DoNotRunTriggeronContDocLink.setDoNotRunTrigger();
        if (request != null) {
            /*attachment = new Attachment();
            attachment.Body = Blob.valueOf(request);
            attachment.ContentType = '.txt';
            attachment.IsPrivate = false;
            attachment.Name = String.valueOf('SW Request.txt');
            attachment.ParentId = parentID;
            attachmentList.add(attachment);*/
            
            //convert to files
            //insert content verioon, then get the document id and link the document id to the record.        
            ContentVersion conVer = new ContentVersion();        
            conVer.ContentLocation = 'S'; // S specify this document is in SF, use E for external files        
            conVer.PathOnClient = 'SW Request.txt'; // The files name, extension is very important here which will help the file in preview.        
            conVer.Title =  'SW Request.txt'; // Display name of the files        
            conVer.VersionData = Blob.valueof(request); // converting your binary string to Blog    
            conVerList.add(conVer);
        }
        if (response != null) {
            /*attachment = new Attachment();
            attachment.Body = Blob.valueOf(response);
            attachment.ContentType = '.txt';
            attachment.IsPrivate = false;
            attachment.Name = String.valueOf('SW Response.txt');
            attachment.ParentId = parentID;
            attachmentList.add(attachment);*/
            //convert to files
            //insert content verioon, then get the document id and link the document id to the record.        
            ContentVersion conVer = new ContentVersion();        
            conVer.ContentLocation = 'S'; // S specify this document is in SF, use E for external files        
            conVer.PathOnClient = 'SW Resonse.txt'; // The files name, extension is very important here which will help the file in preview.        
            conVer.Title =  'SW Response.txt'; // Display name of the files        
            conVer.VersionData = Blob.valueof(response); // converting your binary string to Blog    
            conVerList.add(conVer);
        }
        /*if (!attachmentList.isEmpty()) {
            insert attachmentList;
        }*/
        if(conVerList.size()>0){
            insert conVerList;
            List<ContentDocumentLink> conDocList= new List<ContentDocumentLink>();
            for(ContentVersion con: conVerList){
                // First get the content document Id from ContentVersion        
                Id conDoc = [SELECT ContentDocumentId FROM ContentVersion WHERE Id =:con.Id].ContentDocumentId;
                
                //Create ContentDocumentLink        
                ContentDocumentLink cDe = new ContentDocumentLink();        
                cDe.ContentDocumentId = conDoc;        
                cDe.LinkedEntityId = parentID; // you can use objectId,GroupId etc        
                cDe.ShareType = 'I'; // Inferred permission, checkout description of ContentDocumentLink object for more details        
                cDe.Visibility = 'AllUsers';
                conDocList.add(cDe);
            }
            insert conDocList;
        }
    }
    public List<Census_Member__c> getCensusMembers(ID censusID, Apttus_Proposal__Proposal__c proposalObj) {
        System.debug('In getCensusMembers CensusID:' + censusID);
        if (proposalObj.Quote_Type__c == 'Renewal' && !proposalObj.Cloned_Quote__c) {
            return null;
        }
        List<Census_Member__c> censusMemberList =
        [Select ID,
        External_Link_ID__c,
        LevelofCoverage__c,
        First_Name__c,
        Last_Name__c,
        Date_of_Birth__c,
        Gender__c,
        SSN__c,
        Zip_Code__c,
        Authorization__c,
        Employment_Status__c,
        Medicare_Eligible__c,
        Reason_for_Medicare__c,
        Tobacco_Use__c,
        Relationship_to_Employee_Subscriber__c
        From Census_Member__c
        Where Census__c = : censusID];
        System.debug('End getCensusMembers censusMemberList:' + censusMemberList);
        return censusMemberList;
    }
    public List<Apttus_Config2__LineItem__c> getLineItems(ID configurationID) {
        System.debug('In getLineItems configurationID:' + configurationID);
        List<Apttus_Config2__LineItem__c> lineItemList =
        [Select ID,
        rateFactor__c,
        singleRate__c,
        familyRate__c,
        husbandWifeRate__c,
        parentChildRate__c,
        parentChildrenRate__c,
        Rate_Status__c,
        LineBusinessT__c,
        Product_Family__c,
        Apttus_Config2__BasePrice__c,
        Apttus_Config2__OptionPrice__c,
        Apttus_Config2__BaseExtendedPrice__c,
        Apttus_Config2__ExtendedPrice__c,
        Apttus_Config2__NetPrice__c,
        Apttus_Config2__ListPrice__c,
        Apttus_Config2__Quantity__c,
        Apttus_Config2__ExtendedQuantity__c,
        Apttus_Config2__LineType__c,
        Apttus_Config2__LineStatus__c,
        Apttus_Config2__SellingTerm__c,
        Apttus_Config2__StartDate__c,
        Apttus_Config2__ProductId__c, //Bundle product
        Apttus_Config2__ProductId__r.Name,
        Apttus_Config2__ProductId__r.ProductCode,
        Apttus_Config2__OptionId__c, //Component Product
        Apttus_Config2__OptionId__r.ProductCode,
        Apttus_Config2__ProductId__r.Apttus_Config2__ConfigurationType__c,
        Apttus_Config2__ConfigurationId__c,
        Apttus_Config2__ConfigurationId__r.SW_Quote_Status__c,
        Apttus_Config2__ConfigurationId__r.SW_Quote_Error__c
        From Apttus_Config2__LineItem__c
        Where Apttus_Config2__ConfigurationId__c = : configurationID
        AND Apttus_Config2__LineStatus__c != 'Cancelled' //Don't send cancelled line Items
        ];
        System.debug('End getLineItems lineItemList:' + lineItemList);
        return lineItemList;
    }
    public InsuranceRates.QuoteHeader getHeaderDetails(Apttus_Proposal__Proposal__c proposalObj, String swQuoteType) {
        System.debug('In getHeaderDetails');
        //Create QuoteHeader
        String formulaName = getFormulaName(proposalObj); //Get respective Formula
        System.debug('Test1');
        String segmentName = proposalObj.Segment__c; //'Mid Market';
        String exchangeIndicator = proposalObj.Exchange__c; //'Off Exchange';
        String quoteType = proposalObj.Quote_Type__c; //'Prospect';
        Date quoteDate = Date.Today(); //Date formatt mm/dd/yyyy
        Date quoteEffDate = proposalObj.Effective_Date__c; //Date formatt mm/dd/yyyy
        Boolean planYearYN = (proposalObj.Plan_Year__c == 'Yes') ? true : false; //'N';
        String swQuoteId = proposalObj.SW_Quote_Id__c;
        String swIterationNo = (proposalObj.SW_Iteration_No__c != null) ? proposalObj.SW_Iteration_No__c.setScale(0).toPlainString() : null;
        String priorExchangeIndicator = proposalObj.Prior_Exchange_Indicator__c;
        String priorSegmentName = proposalObj.Prior_Segment_Name__c;
        System.debug('Test2');
        Date priorQuoteEffDate = proposalObj.Prior_Effective_Date__c; //Date, Datetime, Long, Int has to be NULL and not ''
        System.debug('Test3');
        String sourceSystemQuoteId = proposalObj.Id;
        String sourceSystemQuoteNo = proposalObj.Name;
        String sourceSystemStatus = '';
        if (quoteType == 'Renewal Quote' && proposalObj.SW_Quote_Status__c == 'RER') {
            sourceSystemStatus = proposalObj.SW_Quote_Status__c;
        } else If (quoteType == 'Renewal' && swQuoteType != null && proposalObj.Batch__c != null) {
            sourceSystemStatus = swQuoteType;
        } else if (quoteType == 'Prospect' && proposalObj.SW_Quote_Status__c == 'RER') {
            sourceSystemStatus = proposalObj.SW_Quote_Status__c;
        } else if (quoteType == 'Revised Renewal' || quoteType == 'Off Anniversary' || quoteType == 'Amended Renewal') {
            quoteType = 'Renewal Quote';
            if (proposalObj.SW_Quote_Status__c == 'RER') {
                sourceSystemStatus = proposalObj.SW_Quote_Status__c;
            }
        }
        /*
          Create StepWise SW SGR Renewals, SW UWA Renewal, Final Rates
          if(proposalObj.Quote_Type__c == 'Renewal' && proposalObj.Cloned_Quote__c) {
          quoteType = 'Renewal Quote';
          } else If(proposalObj.Quote_Type__c == 'Renewal' && (proposalObj.SW_Quote_Status__c == NULL || proposalObj.SW_Quote_Status__c == '' )){
          sourceSystemStatus = 'Create SW SGR Renewal';
          }else{
          //JS: Modified on 11/5/2015: If Quote Status starts with Err then send 'SW SGR Rates Updated' to SW
          if(proposalObj.Quote_Type__c == 'Renewal' && proposalObj.SW_Quote_Status__c != null && proposalObj.SW_Quote_Status__c.contains('Err')){
          System.debug('**1. Overwrite Quote Status from ' + proposalObj.SW_Quote_Status__c + ' to \'Create SW SGR Renewal\'');
          proposalObj.SW_Quote_Status__c = 'Create SW SGR Renewal';
          } else if(proposalObj.Quote_Type__c == 'Renewal' &&
          (proposalObj.SW_Quote_Status__c == 'SW SGR Renewal Created')){
          //if SW SGR Renewal is created then next steps is Create SW UWA Renewal
          System.debug('**2. Overwrite Quote Status from ' + proposalObj.SW_Quote_Status__c + ' to \'Create SW UWA Renewal\'');
          proposalObj.SW_Quote_Status__c = 'Create SW UWA Renewal';
          } else if(proposalObj.Quote_Type__c == 'Renewal' &&
          (proposalObj.SW_Quote_Status__c == 'SW UWA Renewal Created')){
          //if SW SGR UWA Renewal is created then next steps is Final Rates
          System.debug('**2. Overwrite Quote Status from ' + proposalObj.SW_Quote_Status__c + ' to \'Get Final Rates\'');
          proposalObj.SW_Quote_Status__c = 'Get Final Rates';
          } else if (proposalObj.Quote_Type__c == 'Prospect' && proposalObj.SW_Quote_Status__c != null && proposalObj.SW_Quote_Status__c.contains('Err')) {
          sourceSystemStatus = '';
          }
          sourceSystemStatus = proposalObj.SW_Quote_Status__c;
          }
          if (quoteType == 'Revised Renewal' || quoteType == 'Off Anniversary' || quoteType == 'Amended Renewal') {
          quoteType = 'Renewal Quote';
          }*/
        if (sourceSystemStatus != null && sourceSystemStatus.equals('Create SW SGR Renewal')) {
            priorSegmentName = '';
            priorExchangeIndicator = '';
            priorQuoteEffDate = null;
        }
        System.debug('Test4');
        String priceListName;
        InsuranceRates.QuoteHeader quoteHeader = new InsuranceRates.QuoteHeader(formulaName, segmentName, quoteType, quoteDate, quoteEffDate, planYearYN, swQuoteId,
                                                                                swIterationNo, exchangeIndicator, priorExchangeIndicator, priorSegmentName, priorQuoteEffDate, priceListName,
                                                                                sourceSystemQuoteId, sourceSystemQuoteNo, sourceSystemStatus);
        System.debug('End getHeaderDetails quoteHeader:' + quoteHeader);
        return quoteHeader;
    }
    public String getFormulaName(Apttus_Proposal__Proposal__c proposalObj) {
        System.debug('\n\ngetFormulaName: ' +
                     '\n Effective Date = :' + formatDate(proposalObj.Effective_Date__c) + ':' +
                     '\n Exchange = :' + proposalObj.Exchange__c + ':' +
                     '\n Segment = :' + proposalObj.Segment__c + ':' +
                     '\n Quote Type = :' + proposalObj.Quote_Type__c + ':');
        string formulaName;
        list<FormulaLookup__c> formulaLookupList;
        string tQuoteType = proposalObj.Quote_Type__c;
        string QuoteType;
        if (proposalObj.Effective_Date__c != null &&
            proposalObj.Exchange__c != null &&
            proposalObj.Segment__c != null &&
            proposalObj.Quote_Type__c != null) {
            QuoteType = (proposalObj.Quote_Type__c == 'Prospect' ? 'Prospect' : 'Renewal');
            // RRB Sold prospect that wants to make a change mid-year. Even though their quote type is Prospect they really are Renewal.
            // Set quote type to Renewal so it hits the Formula Table.
            //if (tQuoteType=='Amended Renewal' || tQuoteType=='Off Anniversary' || tQuoteType=='Renewal Quote') {
            if ((tQuoteType == 'Amended Renewal' || tQuoteType == 'Off Anniversary' || tQuoteType == 'Renewal Quote')
                && proposalObj.Effective_Date__c != null
                && proposalObj.Prior_Effective_Date__c != null
                && proposalObj.Effective_Date__c != proposalObj.Prior_Effective_Date__c) {
                QuoteType = 'Prospect';
            }
            /* } else  if (proposalObj.Segment__c != null && proposalObj.Prior_Segment_Name__c != null &&
              proposalObj.Segment__c != proposalObj.Prior_Segment_Name__c) {
              QuoteType = 'Renewal';
              } else {
              if (tQuoteType=='Amended Renewal' || tQuoteType=='Off Anniversary' || tQuoteType=='Revised Renewal') {
              return '';
              }
              }
              }*/
            System.debug('QuoteType ' + QuoteType);
            formulaLookupList = [Select Formula_Name__c
                                 From FormulaLookup__c
                                 Where Start_Date__c <= TODAY
                                 AND End_Date__c >= TODAY
                                 AND Effective_Start_Date__c <= :proposalObj.Effective_Date__c
                                 AND Effective_End_Date__c >= :proposalObj.Effective_Date__c
                                 AND Exchange_Indicator__c = :proposalObj.Exchange__c
                                 AND Market_Segment__c = :proposalObj.Segment__c
                                 AND Quote_Type__c = :QuoteType
                                 Order By CreatedDate DESC];
        }
        if (formulaLookupList != null && formulaLookupList.size()> 0) {
            if (formulaLookupList.size() > 1) System.debug('Data Error in getting FormulaName: More than one formula matched:' + formulaLookupList);
            formulaName = formulaLookupList[0].Formula_Name__c;
        }
        if (formulaName == null) {
            String exceptionMessage = 'Quoting for this effective date is not yet available for the options submitted.<BR/>' +
            'Effective Date = ' + formatDate(proposalObj.Effective_Date__c) +
            '<BR/> Exchange = ' + proposalObj.Exchange__c +
            '<BR/> Segment = ' + proposalObj.Segment__c +
            '<BR/> Quote Type = ' + proposalObj.Quote_Type__c;
            proposalObj.Renewal_Detail_Error_Message__c = exceptionMessage.replaceALL('<BR/>', '\n');
            update proposalObj;
            throw new APTSException(exceptionMessage);
        }
        System.debug('getFormulaName formulaName =' + formulaName);
        return formulaName;
    }
    public InsuranceRates.GroupInfo getGroupDetails(Apttus_Proposal__Proposal__c proposalObj) {
        System.debug('In getGroupDetails');
        //Get Group Details
        //Create GroupInfo
        String groupName = proposalObj.Apttus_Proposal__Account__r.Name; //'SFDC XML Test Group';
        String groupNumber = proposalObj.Apttus_Proposal__Account__r.GroupNumber__c; //'00525821';
        if (groupNumber == null || groupNumber.length() == 0) {
            groupNumber = proposalObj.Apttus_Proposal__Account__r.Prospect_Id__c;
        }
        String groupState = proposalObj.Apttus_Proposal__Account__r.ShippingState; //'PA';
        String groupCounty = proposalObj.Apttus_Proposal__Account__r.ShippingCounty__c; //'Cumberland';
        String groupZip = proposalObj.Apttus_Proposal__Account__r.ShippingPostalCode; //'17241';
        String groupSIC = proposalObj.SIC_Code__c; //proposalObj.Apttus_Proposal__Account__r.Parent.Sic; //'8049';
        Annual_Attestation__c attestation;
        //Annual Attestations should be considered for year prior to Proposal Effective Date
        String LastEffectiveDateYear = String.valueOf(proposalObj.Effective_Date__c.year() - 1);
        System.debug('>> Query Annual_Attestation__c Account : ' + proposalObj.Apttus_Proposal__Account__c +
                     ' Effective Date : ' + proposalObj.Effective_Date__c +
                     ' LastEffectiveDateYear: ' + LastEffectiveDateYear);
        try {
            attestation = [SELECT Id, Size__c, Year__c
                           FROM Annual_Attestation__c
                           Where Account__c = :proposalObj.Apttus_Proposal__Account__c
                           AND Type__c = 'MSP'
                           AND Year__c != NULL
                           AND Year__c <= :LastEffectiveDateYear
                           Order By CreatedDate
                           Limit 1];
            System.debug('>> Annual_Attestation__c:' + attestation);
        } catch(Exception ex) {
            System.debug('Exception while getting MSP Size:' + ex.getMessage());
        }
        Integer groupMSPSize;
        if (attestation != null && attestation.Size__c != null) {
            groupMSPSize = Integer.valueOf(GroupMSPSizeMap.get(attestation.Size__c));
            //update Proposal MSP size
            proposalObj.MSP_Employer_Size__c = String.valueOf(groupMSPSize);
        } else {
            System.debug('proposalObj.MSP_Employer_Size__c:' + proposalObj.MSP_Employer_Size__c);
            groupMSPSize = Integer.valueOf(GroupMSPSizeMap.get(proposalObj.MSP_Employer_Size__c)); // 1, 20 or 100
        }
        // groupMSPSize = Integer.valueOf(GroupMSPSizeMap.get(proposalObj.MSP_Employer_Size__c)); // 1, 20 or 100
        //groupInfo.groupPctAuths             = getString(proposalObj.Census__r.Percentage_Authorization__c, 2);  //null or valid value
        String priorGroupCounty = proposalObj.Prior_Group_County__c;
        String priorGroupSIC = proposalObj.Prior_Group_SIC__c;
        Integer priorGroupMSPSize = null;
        String sPriorGroupMSPSize = proposalObj.Prior_Group_MSPSize__c;
        if (sPriorGroupMSPSize != null && sPriorGroupMSPSize.length() > 0) {
            priorGroupMSPSize = Integer.valueOf(sPriorGroupMSPSize);
        }
        if (proposalObj.Quote_Type__c.equals('Renewal') && proposalObj.Renewal_Stage_Indicator__c != null && proposalObj.Renewal_Stage_Indicator__c.equals('Quote Prepared')) {
            priorGroupMSPSize = null;
            priorGroupSIC = '';
            priorGroupCounty = '';
        }
        InsuranceRates.GroupInfo groupInfo = new InsuranceRates.GroupInfo(groupName, groupNumber, groupState, groupCounty, groupZip, groupSIC, groupMSPSize,
                                                                          priorGroupCounty, priorGroupSIC, priorGroupMSPSize);
        System.debug('End getGroupDetails groupInfo:' + groupInfo);
        return groupInfo;
    }
    public List<InsuranceRates.Product> getProductDetails(List<Apttus_Config2__LineItem__c> lineItemList,
                                                          Apttus_Proposal__Proposal__c proposalObj) {
        System.debug('In getProductDetails');
        List<InsuranceRates.Product> productList = new List<InsuranceRates.Product> ();
        String planYear = proposalObj.Plan_Year__c;
        Date quoteEffectiveDate = proposalObj.Effective_Date__c;
        String quoteSegment = proposalObj.Segment__c;
        String size = proposalObj.Census__r.Size__c;
        Decimal totalSubscribers = proposalObj.Census__r.Total_Subscribers__c;
        boolean medicalExist = false;
        boolean dentalExist = false;
        boolean visionExist = false;
        system.debug('lineItemList' + lineItemList);
        for (Apttus_Config2__LineItem__c lineItem : lineItemList) {
            //For standard commercial - the rates are requested and returned at the component ID level.
            //For ASO and Mid Market 51-99, send SW combo ID and the rates are returned at the combo and component ID level – med, rx and stoploss (ASO only).
            String productFamily = lineItem.Product_Family__c;
            String configurationType = lineItem.Apttus_Config2__ProductId__r.Apttus_Config2__ConfigurationType__c;
            system.debug('productFamily' + productFamily);
            system.debug('configurationType' + configurationType);
            if ((proposalObj.Segment__c == 'Standard Commercial' && lineItem.Apttus_Config2__LineType__c != 'Bundle') ||
            (proposalObj.Segment__c != 'Standard Commercial' && lineItem.Apttus_Config2__LineType__c != 'Option')) {
                if (configurationType != null && configurationType.equals('Standalone') && productFamily != null && productFamily.equals('Dental')) {
                    dentalExist = true;
                }
                if (configurationType != null && configurationType.equals('Standalone') && productFamily != null && productFamily.equals('Vision')) {
                    visionExist = true;
                }
                if (productFamily != null && productFamily.equals('Medical')) {
                    medicalExist = true;
                }
                String sourceSystemProductKey = lineItem.Id;
                String renewalType = '';
                String requestedProductId = '';
                Date effectiveDate = null;
                Boolean employeeOnlyCvgYN = false; //Default always false
                if (lineItem.Apttus_Config2__LineType__c == 'Option') {
                    requestedProductId = lineItem.Apttus_Config2__OptionId__r.ProductCode; //Option Product Code
                } else {
                    requestedProductId = lineItem.Apttus_Config2__ProductId__r.ProductCode; //Bundle or Standalone Product Code
                }
                /*if(lineItem.Apttus_Config2__StartDate__c == null){
                  effectiveDate       = proposalObj.Effective_Date__c;            //'05/01/2015';
                  }else{
                  effectiveDate       = lineItem.Apttus_Config2__StartDate__c;    //'05/01/2015';
                  }*/
                effectiveDate = lineItem.Apttus_Config2__StartDate__c;
                if (proposalObj.Quote_Type__c == 'Renewal' || proposalObj.Quote_Type__c == 'Renewal Quote') {
                    if (lineItem.Apttus_Config2__LineStatus__c == 'Replacement' ||
                        lineItem.Apttus_Config2__LineStatus__c == 'Renewed' ||
                        lineItem.Apttus_Config2__LineStatus__c == 'Upgraded') {
                        renewalType = 'Rep'; //"Rep"(Product is Same or replaced) - Existing
                    } else {
                        renewalType = 'Alt'; //Default = "Alt"(alternate products) - Upsell, New
                    }
                } else {
                    renewalType = null;
                }
                InsuranceRates.Product product = new InsuranceRates.Product(sourceSystemProductKey, requestedProductId, effectiveDate, employeeOnlyCvgYN, renewalType);
                System.debug('End getProductDetails products ' + product);
                productList.add(product);
            }
            if (lineItem.Apttus_Config2__LineType__c == 'Option') {
                //Option Product Code
                system.debug('option' + lineItem.Apttus_Config2__OptionId__r.ProductCode);
                // Ashish
                planidSet.add(lineItem.Apttus_Config2__OptionId__r.ProductCode);
            } else {
                //Bundle or Standalone Product Code
                system.debug('bundle' + lineItem.Apttus_Config2__ProductId__r.ProductCode);
                //Ashish
                planidSet.add(lineItem.Apttus_Config2__ProductId__r.ProductCode);
            }
            //getting facets products id
            system.debug('planidSet***' + planidSet);
        }
        system.debug('medicalExist' + medicalExist);
        system.debug('dentalExist' + dentalExist);
        system.debug('visionExist' + visionExist);
        if (!medicalExist) {
            if (dentalExist || visionExist) {
                proposalObj.DentalVisionOnlyT__c = true;
            } else {
                proposalObj.DentalVisionOnlyT__c = false;
            }
        } else {
            proposalObj.DentalVisionOnlyT__c = false;
        }
        /* Ashish*/
        if (/*!proposalObj.Quote_Type__c.equals('Renewal')  && */ proposalObj.Batch__c == null) {
            for (Facets_Product_ID__c fp :[select id, name, Plan_Year__c, Group_Size__c, Product__r.plan_type__c, Plan_ID__c, Term_Date__c, Start_Date__c, Embedded_Pediatric__c 
                                           from Facets_Product_ID__c
                                           where Plan_ID__c in :planidSet 
                                           order by Start_Date__c DESC]) 
            {
                if(!lineItemToFacetsProdId.containsKey(fp.Plan_ID__c) ||
                   (lineItemToFacetsProdId.containsKey(fp.Plan_ID__c) && lineItemToFacetsProdId.get(fp.Plan_ID__c)==null)){
                       system.debug('fp loop' + fp);
                       if (quoteSegment != 'ASO Small Business' && fp.Product__r.plan_type__c == 'Medical' && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && quoteEffectiveDate >= fp.Start_Date__c && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                           lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                           system.debug('fp loop 1' + fp);
                       } else if (quoteSegment != 'ASO Small Business' && (quoteEffectiveDate >= fp.Start_Date__c) && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && fp.Product__r.plan_type__c != 'Medical' && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                           lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                           system.debug('fp loop 2' + fp);
                       } else if (quoteSegment == 'ASO Small Business' && fp.Product__r.plan_type__c == 'Medical' && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && quoteEffectiveDate >= fp.Start_Date__c && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                           if ((!String.isBlank(size) && fp.Group_Size__c == '51 Plus' && size == '51 - 100') || (totalSubscribers > 51 && fp.Group_Size__c == '51 Plus')) {
                               system.debug('fp loop 3' + fp);
                               lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                           } else if ((!String.isBlank(size) && fp.Group_Size__c == 'Under 51' && size == 'Under 51') || (totalSubscribers< 51 && fp.Group_Size__c == 'Under 51')) {
                               system.debug('fp loop 4' + fp);
                               lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                           }
                       } else if (quoteSegment == 'ASO Small Business' && fp.Product__r.plan_type__c != 'Medical' && (quoteEffectiveDate >= fp.Start_Date__c) && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                           if ((!String.isBlank(size) && fp.Group_Size__c == '51 Plus' && size == '51 - 100') || (totalSubscribers> 51 && fp.Group_Size__c == '51 Plus') || (fp.Group_Size__c == 'Not Applicable')) {
                               system.debug('fp loop 4' + fp);
                               lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                           } else if ((!String.isBlank(size) && fp.Group_Size__c == 'Under 51' && size == 'Under 51') || (totalSubscribers< 51 && fp.Group_Size__c == 'Under 51') || (fp.Group_Size__c == 'Not Applicable')) {
                               system.debug('fp loop 5' + fp);
                               lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                           }
                       }
                   }
            } 
        }
        system.debug('lineItemToFacetsProdId' + lineItemToFacetsProdId);
        return productList;
    }
    public InsuranceRates.CensusInfo getCensusInfo(Apttus_Proposal__Proposal__c proposalObj) {
        System.debug('In getCensusDetails');
        //Get Census Details
        String censusName = '';
        String censusType = '';
        if (proposalObj.Sales360_Quote_ID__c == null) {
            censusName = proposalObj.Census__r.Census_Name__c; //'SFDC XML Test Census';
            if (proposalObj.Quote_Type__c == 'Prospect') {
                censusType = (proposalObj.Census__r.Compliance__c ? 'Compliance' : 'Producer');
            } else {
                censusType = 'Renewal';
            }
        } else {
            censusName = proposalObj.Prior_Census_Name__c;
        }
        String priorCensusName = proposalObj.Prior_Census_Name__c; //'SFDC XML Test Census';
        InsuranceRates.CensusInfo censusInfo = new InsuranceRates.CensusInfo(censusName, censusType, priorCensusName);
        System.debug('In getCensusDetails censusInfo:' + censusInfo);
        return censusInfo;
    }
    public List<InsuranceRates.CensusItem> getCensusDetails(List<Census_Member__c> censusMemberList,
                                                            Apttus_Proposal__Proposal__c proposalObj) {
        System.debug('In getCensusDetails');
        List<InsuranceRates.CensusItem> censusItemList = new List<InsuranceRates.CensusItem> ();
        String linkageId = null;
        String contractType = null;
        String firstName = null;
        String lastName = null;
        Date birthDate = null;
        String gender = null;
        String ssn = null;
        String zipCode = null;
        Boolean authorizedYN = false;
        String employmentStatus = null;
        Boolean medicareEligibleIndicator = false;
        String medicareEligibleReason = null;
        Boolean tobaccoUsageIndicator = false;
        if (censusMemberList == null || censusMemberList.isEmpty()) {
            //popopate empty Census member list
            censusItemList.add(new InsuranceRates.CensusItem(linkageId, contractType, firstName, lastName, birthDate, gender, ssn, zipCode, authorizedYN, employmentStatus,
                                                             medicareEligibleIndicator, medicareEligibleReason, tobaccoUsageIndicator));
        } else {
            for (Census_Member__c censusMember : censusMemberList) {
                linkageId = string.valueOf(censusMember.External_Link_ID__c); //'111';
                if (censusMember.LevelofCoverage__c != null) {
                    contractType = LevelofCoverage.get(censusMember.LevelofCoverage__c.toUpperCase()); //contractType i.e. 'HW'
                } else {
                    contractType = LevelofCoverage.get(censusMember.Relationship_to_Employee_Subscriber__c.toUpperCase());
                }
                firstName = censusMember.First_Name__c;
                lastName = censusMember.Last_Name__c;
                birthDate = censusMember.Date_of_Birth__c; //'08/13/1968';
                gender = censusMember.Gender__c; //'M';
                ssn = formatSSN(censusMember.SSN__c); //'999-99-9999';
                zipCode = censusMember.Zip_Code__c; //'33333';
                authorizedYN = (censusMember.Authorization__c == 'Y') ? true : false; //'Y';
                employmentStatus = censusMember.Employment_Status__c; //'Active';
                medicareEligibleIndicator = (censusMember.Medicare_Eligible__c == 'Y') ? true : false; //'Y';
                medicareEligibleReason = validateMedicalEligible(censusMember.Medicare_Eligible__c, censusMember.Reason_for_Medicare__c);
                tobaccoUsageIndicator = (censusMember.Tobacco_Use__c == 'Y') ? true : false; //'Y';
                censusItemList.add(new InsuranceRates.CensusItem(linkageId, contractType, firstName, lastName, birthDate, gender, ssn, zipCode, authorizedYN, employmentStatus,
                                                                 medicareEligibleIndicator, medicareEligibleReason, tobaccoUsageIndicator));
            }
        }
        return censusItemList;
    }
    public String formatSSN(String formattedSSN) {
        System.debug('formatSSN ssnDec = ' + formattedSSN);
        if (formattedSSN == null) return null;
        if (formattedSSN.length() >= 9) {
            formattedSSN = formattedSSN.subString(0, 3) + '-' +
            formattedSSN.subString(3, 5) + '-' +
            formattedSSN.subString(5, 9);
        }
        System.debug('formattedSSN = ' + formattedSSN);
        return formattedSSN;
    }
    public Apttus_Proposal__Proposal__c parseResponse(Apttus_Proposal__Proposal__c proposalObj,
                                                      List<Apttus_Config2__LineItem__c> lineItemList,
                                                      InsuranceRatesV20_WS_Client.WebServiceResults webServiceResults,
                                                      InsuranceRates insuranceRates,
                                                      Decimal timeTakenForResponse,
                                                      ID ProductConfigurationID, boolean ignoreSWError) {
        System.debug('In parseResponse');
        List<Rate__c> rateList = new List<Rate__c> ();
        List<Plan_Info__c> planInfoList = new List<Plan_Info__c> ();
        List<Product_Rate__c> productRateList = new List<Product_Rate__c> ();
        List<Product_ABRS__c> ABRsList = new List<Product_ABRS__c> ();
        Map<ID, Apttus_Config2__LineItem__c> lineItemMap = new Map<ID, Apttus_Config2__LineItem__c> ();
        Apttus_Config2__ProductConfiguration__c productConfiguration;
        String responseCode = webServiceResults.responseCode;
        String responseMessage = webServiceResults.responseMessage;
        if (responseCode != '0') {
            throw new APTSException('<BR/>Invalid Stepwise Response Code :' + responseCode +
                                    '<BR/>  Response Message :' + responseMessage +
                                    '<BR/>');
        }
        swResponse = new SW_Response__c();
        swResponse.ProductConfiguration__c = ProductConfigurationID;
        swResponse.timeTakenForResponse__c = timeTakenForResponse;
        System.debug('In parseResponse Step 1');
        //Reset Member Counts
        proposalObj.singleSubscribers__c = null;
        proposalObj.Husband_Wife_Subscribers__c = null;
        proposalObj.parentChildSubscribers__c = null;
        proposalObj.parentChildrenSubscribers__c = null;
        proposalObj.familySubscribers__c = null;
        proposalObj.totalSubscribers__c = null;
        proposalObj.nonSeniorSubscribers__c = null;
        proposalObj.totalMembers__c = null;
        System.debug('In parseResponse Step 2');
        boolean isHRA = false;
        boolean isSCEN2oSCEN3 = false;
        Double totalAmount = 0.0;
        swResponse.applicationId__c = webServiceResults.applicationId;
        swResponse.transactionId__c = webServiceResults.transactionId; //externalID
        swResponse.submissionDateTime__c = webServiceResults.submissionDateTime;
        swResponse.responseDateTime__c = webServiceResults.responseDateTime;
        //swResponse.callingSystemUserId__c   = webServiceResults.callingSystemUserId;
        //swResponse.context__c               = webServiceResults.context;
        swResponse.responseCode__c = webServiceResults.responseCode;
        swResponse.responseMessage__c = webServiceResults.responseMessage;
        //swResponse.incidentId__c            = webServiceResults.incidentId;
        System.debug('In parseResponse Step 3');
        for (Apttus_Config2__LineItem__c lineItem : lineItemList) {
            system.debug('lineitem 889' + lineItem);
            lineItemMap.put(lineItem.Id, lineItem);
            if (productConfiguration == null && lineItem.Apttus_Config2__ConfigurationId__c != null) {
                productConfiguration = lineItem.Apttus_Config2__ConfigurationId__r;
            }
            if (lineItem.Apttus_Config2__LineStatus__c != 'Cancelled' && lineItem.Apttus_Config2__OptionId__r != null && lineItemToFacetsProdId.containsKey(lineItem.Apttus_Config2__OptionId__r.ProductCode)) {
                lineItem.Facets_Product__c = lineItemToFacetsProdId.get(lineItem.Apttus_Config2__OptionId__r.ProductCode);
                system.debug('lineitem 896' + lineItem);
            } else if (lineItem.Apttus_Config2__LineStatus__c != 'Cancelled' && lineItem.Apttus_Config2__ProductId__r != null && lineItemToFacetsProdId.containsKey(lineItem.Apttus_Config2__ProductId__r.ProductCode)) {
                lineItem.Facets_Product__c = lineItemToFacetsProdId.get(lineItem.Apttus_Config2__ProductId__r.ProductCode);
                system.debug('lineitem 899' + lineItem);
            } /* Ashish*/
            system.debug('lineitem 901' + lineItem);
        }
        String productErrorMsg = '';
        //List<Apttus_Config2__LineItem__c> newLineItemList = new List<Apttus_Config2__LineItem__c>();
        System.debug('In parseResponse Step 4');
        try {
            InsuranceRates.QuoteResponseHeader qrh = InsuranceRates.quoteResponseHeader;
            if (qrh == null) throw new APTSException('quoteResponseHeader is null.');
            swResponse.swQuoteId__c = qrh.swQuoteId;
            swResponse.swIterationNo__c = parseDecimal(qrh.swIterationNo);
            swResponse.sourceSystemQuoteId__c = qrh.sourceSystemQuoteId;
            swResponse.quoteStatus__c = qrh.quoteStatus;
            swResponse.quoteError__c = qrh.quoteError;
            if (productConfiguration != null) {
                productConfiguration.SW_Quote_Status__c = qrh.quoteStatus;
                productConfiguration.SW_Quote_Error__c = qrh.quoteError;
            }
            //swResponse.geographicRegion__c      = qrh.geographicRegion;
            swResponse.overallChangePct__c = qrh.overallChangePct;
            swResponse.scriptCheckVarianceApplied__c = qrh.scriptCheckVarianceApplied;
            swResponse.scriptCheckVarianceFactor__c = qrh.scriptCheckVarianceFactor;
            swResponse.censusVarianceApplied__c = qrh.censusVarianceApplied;
            swResponse.censusVarianceFactor__c = qrh.censusVarianceFactor;
            //Update Proposal
            proposalObj.SW_Iteration_No__c = parseDecimal(qrh.swIterationNo);
            proposalObj.SW_Quote_Id__c = qrh.swQuoteId;
            proposalObj.SW_Quote_Status__c = qrh.quoteStatus;
            proposalObj.Census_Variance_Applied__c = qrh.censusVarianceApplied;
            proposalObj.census_Variance_Factor__c = qrh.censusVarianceFactor;
            proposalObj.script_Check_Variance_Applied__c = qrh.scriptCheckVarianceApplied;
            proposalObj.script_Check_Variance_Factor__c = qrh.scriptCheckVarianceFactor;
            proposalObj.GRA__c = qrh.geographicRegion;
            System.debug('In parseResponse Step 5');
            Product_Rate__c productRateObj;
            Rate__c rateObject;
            Plan_Info__c planInfoObj;
            Apttus_Config2__LineItem__c lineItem;
            Integer counter = 1;
            List<InsuranceRates.ProductRate> swProductRateList = insuranceRates.productRateList;
            System.debug('swProductRateList size ' + swProductRateList.size());
            if (swProductRateList == null) throw new APTSException('productRates is null.');
            for (InsuranceRates.ProductRate productRate : swProductRateList) {
                productRateObj = new Product_Rate__c();
                productRateObj.SW_Response__r = new SW_Response__c(transactionId__c = swResponse.transactionId__c);
                System.debug('In parseResponse Step 6 ');
                System.debug('In parseResponse Step 6 productRate ' + productRate);
                System.debug('In parseResponse Step 6 productRate.sourceSystemProductKey ' + productRate.sourceSystemProductKey);
                //Get related Line Item
                lineItem = lineItemMap.get(productRate.sourceSystemProductKey);
                System.debug('In parseResponse Step 61 ');
                if (lineItem != null) {
                    productRateObj.LineItem__c = lineItem.Id;
                    productRateObj.ExternalID__c = swResponse.transactionId__c + '-' + lineItem.Id;
                    System.debug('In parseResponse Step 62');
                    lineItem.Product_Rate__r = new Product_Rate__c(ExternalID__c = productRateObj.ExternalID__c);
                    //update Line Item Rate Factor
                    lineItem.rateFactor__c = productRate.rateFactor;
                    System.debug('In parseResponse Step 63');
                    //This is for renewal template
                    if ((productRate.requestedProductId == 'SENC2') || (productRate.requestedProductId == 'SENC3')) {
                        isSCEN2oSCEN3 = true;
                    }
                    System.debug('HRA Line of Business ' + lineItem.LineBusinessT__c);
                    //This is for renewal template
                    if (lineItem.LineBusinessT__c != null && lineItem.LineBusinessT__c.contains('HRA')) {
                        isHRA = true;
                    }
                    if (productRate.estimatedMonthlyPremium != null) {
                        lineItem.Estimated_Monthly_Premium__c = productRate.estimatedMonthlyPremium;
                        lineItem.Apttus_Config2__BasePrice__c = productRate.estimatedMonthlyPremium;
                        //totalAmount = totalAmount + productRate.estimatedMonthlyPremium;
                        lineItem.Apttus_Config2__OptionPrice__c = lineItem.Apttus_Config2__BasePrice__c;
                        lineItem.Apttus_Config2__BaseExtendedPrice__c = lineItem.Apttus_Config2__BasePrice__c;
                        lineItem.Apttus_Config2__ExtendedPrice__c = lineItem.Apttus_Config2__BasePrice__c;
                        lineItem.Apttus_Config2__ListPrice__c = lineItem.Apttus_Config2__BasePrice__c;
                        lineItem.Apttus_Config2__NetPrice__c = lineItem.Apttus_Config2__BasePrice__c;
                    }
                    lineItem.Apttus_Config2__Quantity__c = 1;
                    lineItem.Apttus_Config2__ExtendedQuantity__c = 1;
                    lineItem.Apttus_Config2__SellingTerm__c = 1.0;
                    lineItem.Rate_Status__c = productRate.productError;
                    lineItem.Apttus_Config2__PricingStatus__c = 'Complete';
                    System.debug('In parseResponse Step 7');
                }
                productRateObj.sourceSystemProductKey__c = productRate.sourceSystemProductKey;
                productRateObj.requestedProductId__c = productRate.requestedProductId;
                productRateObj.productError__c = productRate.productError;
                if (productRate.productError != null && !productRate.productError.equals('No Errors')) {
                    productErrorMsg = productRate.requestedProductId + 'has error ' + productRate.productError;
                }
                if (productRate.tobaccoUsageIndicator != null && productRate.tobaccoUsageIndicator) {
                    productRateObj.tobaccoUsageYN__c = 'Y';
                } else {
                    productRateObj.tobaccoUsageYN__c = 'N';
                }
                productRateObj.creditableDrug__c = productRate.creditableDrug;
                productRateObj.hmoRateStatus__c = productRate.hmoRateStatus;
                if (productRate.estimatedMonthlyPremium != null) {
                    //productRateObj.estimatedMonthlyPremium__c   = '';
                    //} else {
                    productRateObj.estimatedMonthlyPremium__c = productRate.estimatedMonthlyPremium;
                }
                System.debug('In parseResponse done with estimatedMonthlyPremium');
                productRateObj.rateFactor__c = productRate.rateFactor;
                System.debug('In parseResponse Step 8');
                InsuranceRates.Enrollment enrollment = productRate.enrollment;
                if (enrollment != null) {
                    System.debug('In parseResponse Step 9');
                    productRateObj.singleSubscribers__c = enrollment.singleSubscribers;
                    productRateObj.husbandWifeSubscribers__c = enrollment.husbandWifeSubscribers;
                    productRateObj.parentChildSubscribers__c = enrollment.parentChildSubscribers;
                    productRateObj.parentChildrenSubscribers__c = enrollment.parentChildrenSubscribers;
                    productRateObj.familySubscribers__c = enrollment.familySubscribers;
                    productRateObj.totalSubscribers__c = enrollment.totalSubscribers;
                    productRateObj.nonSeniorSubscribers__c = enrollment.nonSeniorSubscribers;
                    productRateObj.totalMembers__c = enrollment.totalMembers;
                    if (lineItem != null) {
                        System.debug('In parseResponse Step 10');
                        lineItem.singleSubscribers__c = productRateObj.singleSubscribers__c;
                        lineItem.husbandWifeSubscribers__c = productRateObj.husbandWifeSubscribers__c;
                        lineItem.parentChildSubscribers__c = productRateObj.parentChildSubscribers__c;
                        lineItem.parentChildrenSubscribers__c = productRateObj.parentChildrenSubscribers__c;
                        lineItem.familySubscribers__c = productRateObj.familySubscribers__c;
                        lineItem.totalSubscribers__c = productRateObj.totalSubscribers__c;
                        lineItem.nonSeniorSubscribers__c = productRateObj.nonSeniorSubscribers__c;
                        lineItem.totalMembers__c = productRateObj.totalMembers__c;
                    }
                    if (proposalObj.totalSubscribers__c == null
                        && productRateObj.totalSubscribers__c != null) {
                        System.debug('In parseResponse Step 11');
                        proposalObj.singleSubscribers__c = productRateObj.singleSubscribers__c;
                        proposalObj.Husband_Wife_Subscribers__c = productRateObj.husbandWifeSubscribers__c;
                        proposalObj.parentChildSubscribers__c = productRateObj.parentChildSubscribers__c;
                        proposalObj.parentChildrenSubscribers__c = productRateObj.parentChildrenSubscribers__c;
                        proposalObj.familySubscribers__c = productRateObj.familySubscribers__c;
                        proposalObj.totalSubscribers__c = productRateObj.totalSubscribers__c;
                        proposalObj.nonSeniorSubscribers__c = productRateObj.nonSeniorSubscribers__c;
                        proposalObj.totalMembers__c = productRateObj.totalMembers__c;
                    }
                }
                InsuranceRates.Rates rates = productRate.rates;
                System.debug('In parseResponse Step 12');
                if (rates != null) {
                    System.debug('In parseResponse Step 13');
                    rateObject = new Rate__c();
                    if (rates.singleRate != null)
                    rateObject.Single_Rate__c = rates.singleRate;
                    if (rates.husbandWifeRate != null)
                    rateObject.Husband_Wife_Rate__c = rates.husbandWifeRate;
                    if (rates.parentChildRate != null)
                    rateObject.Parent_Child_Rate__c = rates.parentChildRate;
                    if (rates.parentChildrenRate != null)
                    rateObject.Parent_Children_Rate__c = rates.parentChildrenRate;
                    if (rates.familyRate != null)
                    rateObject.Family_Rate__c = rates.familyRate;
                    rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                    System.debug('In parseResponse Step 14');
                    if (lineItem != null) {
                        System.debug('In parseResponse Step 15');
                        //Update Line Item Rates
                        if (rates.singleRate != null)
                        lineItem.singleRate__c = rates.singleRate;
                        if (rates.husbandWifeRate != null)
                        lineItem.husbandWifeRate__c = rates.husbandWifeRate;
                        if (rates.parentChildRate != null)
                        lineItem.parentChildRate__c = rates.parentChildRate;
                        if (rates.parentChildrenRate != null)
                        lineItem.parentChildrenRate__c = rates.parentChildrenRate;
                        if (rates.familyRate != null)
                        lineItem.familyRate__c = rates.familyRate;
                        System.debug('In parseResponse Step 16');
                    }
                    rateList.add(rateObject);
                    System.debug('In parseResponse Step 17');
                    productRateObj.Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    System.debug('In parseResponse Step 18');
                }
                //Start medicalPlanInfo
                InsuranceRates.PlanInfo medicalPlanInfo = productRate.medicalPlanInfo;
                System.debug('In parseResponse Step 19');
                if (medicalPlanInfo != null) {
                    System.debug('In parseResponse Step 20');
                    planInfoObj = new Plan_Info__c();
                    planInfoObj.planId__c = medicalPlanInfo.planId;
                    planInfoObj.Rate_Factor__c = medicalPlanInfo.rateFactor;
                    planInfoObj.Aggregate_Rate_Factor__c = medicalPlanInfo.aggregateRateFactor;
                    planInfoObj.Specific_Rate_Factor__c = medicalPlanInfo.specificRateFactor;
                    planInfoObj.ExternalID__c = webServiceResults.transactionId + counter++;
                    System.debug('In parseResponse Step 21');
                    InsuranceRates.Rates medRates = medicalPlanInfo.rates;
                    System.debug('In parseResponse Step 22');
                    if (medRates != null) {
                        System.debug('In parseResponse Step 23');
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = medRates.singleRate;
                        rateObject.Husband_Wife_Rate__c = medRates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = medRates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = medRates.parentChildrenRate;
                        rateObject.Family_Rate__c = medRates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        planInfoObj.Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    System.debug('In parseResponse Step 24');
                    planInfoList.add(planInfoObj);
                    productRateObj.Medical_Plan_Info__r = new Plan_Info__c(ExternalID__c = planInfoObj.ExternalID__c);
                }
                //End medicalPlanInfo
                //Start drugPlanInfo
                System.debug('In parseResponse Step 25');
                InsuranceRates.PlanInfo drugPlanInfo = productRate.drugPlanInfo;
                if (drugPlanInfo != null) {
                    System.debug('In parseResponse Step 26');
                    planInfoObj = new Plan_Info__c();
                    planInfoObj.planId__c = drugPlanInfo.planId;
                    planInfoObj.Rate_Factor__c = drugPlanInfo.rateFactor;
                    planInfoObj.Aggregate_Rate_Factor__c = drugPlanInfo.aggregateRateFactor;
                    planInfoObj.Specific_Rate_Factor__c = drugPlanInfo.specificRateFactor;
                    planInfoObj.ExternalID__c = webServiceResults.transactionId + counter++;
                    System.debug('In parseResponse Step 27');
                    InsuranceRates.Rates drugRates = drugPlanInfo.rates;
                    if (drugRates != null) {
                        System.debug('In parseResponse Step 28');
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = drugRates.singleRate;
                        rateObject.Husband_Wife_Rate__c = drugRates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = drugRates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = drugRates.parentChildrenRate;
                        rateObject.Family_Rate__c = drugRates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        System.debug('In parseResponse Step 29');
                        planInfoObj.Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    planInfoList.add(planInfoObj);
                    System.debug('In parseResponse Step 30');
                    productRateObj.Drug_Plan_Info__r = new Plan_Info__c(ExternalID__c = planInfoObj.ExternalID__c);
                }
                //End drugPlanInfo
                //Start StopLoss PlanInfo
                System.debug('In parseResponse Step 31');
                InsuranceRates.StopLossPlanInfo stoplossPlanInfo = productRate.stoplossPlanInfo;
                if (stoplossPlanInfo != null) {
                    System.debug('In parseResponse Step 32');
                    planInfoObj = new Plan_Info__c();
                    planInfoObj.planId__c = stoplossPlanInfo.planInfo.planId;
                    planInfoObj.Rate_Factor__c = stoplossPlanInfo.planInfo.rateFactor;
                    planInfoObj.Aggregate_Rate_Factor__c = stoplossPlanInfo.planInfo.aggregateRateFactor;
                    planInfoObj.Specific_Rate_Factor__c = stoplossPlanInfo.planInfo.specificRateFactor;
                    planInfoObj.ExternalID__c = webServiceResults.transactionId + counter++;
                    System.debug('In parseResponse Step 33');
                    //Rates
                    InsuranceRates.Rates slrates = stoplossPlanInfo.planInfo.rates;
                    if (slrates != null) {
                        System.debug('In parseResponse Step 34');
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = slrates.singleRate;
                        rateObject.Husband_Wife_Rate__c = slrates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = slrates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = slrates.parentChildrenRate;
                        rateObject.Family_Rate__c = slrates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        planInfoObj.Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    System.debug('In parseResponse Step 35');
                    //specificPremiumRates
                    InsuranceRates.Rates slspecificPremiumRates = stoplossPlanInfo.specificPremiumRates;
                    if (slspecificPremiumRates != null) {
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = slspecificPremiumRates.singleRate;
                        rateObject.Husband_Wife_Rate__c = slspecificPremiumRates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = slspecificPremiumRates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = slspecificPremiumRates.parentChildrenRate;
                        rateObject.Family_Rate__c = slspecificPremiumRates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        planInfoObj.Specific_Premium_Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    System.debug('In parseResponse Step 36');
                    //aggregatePremiumRates
                    InsuranceRates.Rates slaggregatePremiumRates = stoplossPlanInfo.aggregatePremiumRates;
                    if (slaggregatePremiumRates != null) {
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = slaggregatePremiumRates.singleRate;
                        rateObject.Husband_Wife_Rate__c = slaggregatePremiumRates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = slaggregatePremiumRates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = slaggregatePremiumRates.parentChildrenRate;
                        rateObject.Family_Rate__c = slaggregatePremiumRates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        planInfoObj.Aggregate_Premium_Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    System.debug('In parseResponse Step 37');
                    //aggregateFactorRates
                    InsuranceRates.Rates slaggregateFactorRates = stoplossPlanInfo.aggregateFactorRates;
                    if (slaggregateFactorRates != null) {
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = slaggregateFactorRates.singleRate;
                        rateObject.Husband_Wife_Rate__c = slaggregateFactorRates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = slaggregateFactorRates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = slaggregateFactorRates.parentChildrenRate;
                        rateObject.Family_Rate__c = slaggregateFactorRates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        planInfoObj.Aggregate_Factor_Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    System.debug('In parseResponse Step 38');
                    //adminFeeRates
                    InsuranceRates.Rates sladminFeeRates = stoplossPlanInfo.adminFeeRates;
                    if (sladminFeeRates != null) {
                        rateObject = new Rate__c();
                        rateObject.Single_Rate__c = sladminFeeRates.singleRate;
                        rateObject.Husband_Wife_Rate__c = sladminFeeRates.husbandWifeRate;
                        rateObject.Parent_Child_Rate__c = sladminFeeRates.parentChildRate;
                        rateObject.Parent_Children_Rate__c = sladminFeeRates.parentChildrenRate;
                        rateObject.Family_Rate__c = sladminFeeRates.familyRate;
                        rateObject.ExternalID__c = webServiceResults.transactionId + counter++;
                        rateList.add(rateObject);
                        planInfoObj.Admin_Fee_Rates__r = new Rate__c(ExternalID__c = rateObject.ExternalID__c);
                    }
                    planInfoList.add(planInfoObj);
                    System.debug('In parseResponse Step 39');
                    productRateObj.Stoploss_Plan_Info__r = new Plan_Info__c(ExternalID__c = planInfoObj.ExternalID__c);
                }
                //End StopLoss PlanInfo
                productRateList.add(productRateObj);
            } //product rate for
            Product_ABRS__c ABRsObj;
            System.debug('In parseResponse Step 40');
            String segmentName = proposalObj.Segment__c;
            Boolean abrsDataExist = false;
            if (InsuranceRates.productABRSList != null) {
                System.debug('In parseResponse Step 41');
                for (InsuranceRates.ProductABRS productABRS : InsuranceRates.productABRSList) {
                    abrsDataExist = true;
                    String requestedProductId = productABRS.requestedProductId;
                    //Link to Line Item
                    System.debug('productABRS sourceSystemProductKey=' + productABRS.sourceSystemProductKey +
                                 ' requestedProductId=' + requestedProductId);
                    lineItem = lineItemMap.get(productABRS.sourceSystemProductKey);
                    List<InsuranceRates.AgeBandRateCount> ageBandRateCountList = productABRS.ageBandRateCountList;
                    if (ageBandRateCountList != null && ageBandRateCountList.size()> 0) {
                        for (InsuranceRates.AgeBandRateCount ageBandRateCount : ageBandRateCountList) {
                            ABRsObj = new Product_ABRS__c();
                            ABRsObj.Age__c = ageBandRateCount.age;
                            ABRsObj.Count__c = ageBandRateCount.count;
                            ABRsObj.Rate__c = ageBandRateCount.rate;
                            //link to Product Rate
                            ABRsObj.Product_Rate__r = new Product_Rate__c(ExternalID__c = swResponse.transactionId__c + '-' + productABRS.sourceSystemProductKey);
                            if (lineItem != null) {
                                ABRsObj.Line_Item__c = lineItem.Id;
                                //Assign ABRs to Line Item - needed for X-Author Output
                                Decimal count = ABRsObj.Count__c;
                                String sCount = '';
                                if (count > 0) {
                                    sCount = String.valueOf(count);
                                }
                                String sRate = convertDecimalToStringWithComma(ABRsObj.Rate__c);
                                Date Effectivedate = proposalObj.Effective_Date__c;
                                Integer Effectiveyear = Effectivedate.year();
                                If (Effectiveyear< 2018) {
                                    if (ABRsObj.Age__c == '0_18') {
                                        lineItem.put('Age_0_18_of_Members__c', sCount);
                                        lineItem.put('Age_0_18_Member_Rate__c', sRate);
                                    } else if (ABRsObj.Age__c == '19_20') {
                                        lineItem.put('Age_19_of_Members__c', sCount);
                                        lineItem.put('Age_19_Member_Rate__c', sRate);
                                        lineItem.put('Age_20_of_Members__c', sCount);
                                        lineItem.put('Age_20_Member_Rate__c', sRate);
                                    } else if (ABRsObj.Age__c == '65_999') {
                                        lineItem.put('Age_65_of_Members__c', sCount);
                                        lineItem.put('Age_65_Member_Rate__c', sRate);
                                    } else {
                                        lineItem.put('Age_' + ABRsObj.Age__c + '_of_Members__c', sCount);
                                        lineItem.put('Age_' + ABRsObj.Age__c + '_Member_Rate__c', sRate);
                                    }
                                }
                                else {
                                    if (ABRsObj.Age__c == '0_14') {
                                        lineItem.put('Age_0_14_of_Members__c', sCount);
                                        lineItem.put('Age_0_14_Member_Rate__c', sRate);
                                    } else if (ABRsObj.Age__c == '65_999') {
                                        lineItem.put('Age_65_of_Members__c', sCount);
                                        lineItem.put('Age_65_Member_Rate__c', sRate);
                                    } else {
                                        lineItem.put('Age_' + ABRsObj.Age__c + '_of_Members__c', sCount);
                                        lineItem.put('Age_' + ABRsObj.Age__c + '_Member_Rate__c', sRate);
                                    }
                                    for(Apttus_Config2__LineItem__c otherLI: lineItemList){
                                        if(otherLI.Id!=lineItem.Id &&
                                           otherLI.Apttus_Config2__LineStatus__c != 'Cancelled' &&
                                            otherLI.Apttus_Config2__ProductId__c!=null &&
                                            otherLI.Apttus_Config2__ProductId__c==lineItem.Apttus_Config2__ProductId__c &&
                                            otherLI.Apttus_Config2__OptionId__c == null){
                                                if (ABRsObj.Age__c == '0_14') {
                                                    otherLI.put('Age_0_14_of_Members__c', sCount);
                                                    otherLI.put('Age_0_14_Member_Rate__c', sRate);
                                                } else if (ABRsObj.Age__c == '65_999') {
                                                    otherLI.put('Age_65_of_Members__c', sCount);
                                                    otherLI.put('Age_65_Member_Rate__c', sRate);
                                                } else {
                                                    otherLI.put('Age_' + ABRsObj.Age__c + '_of_Members__c', sCount);
                                                    otherLI.put('Age_' + ABRsObj.Age__c + '_Member_Rate__c', sRate);
                                                }
                                            }
                                    }
                                }
                            }
                            /*if(ABRsObj.Age__c == '0_18'){
                              lineItem.put('Age_0_18_of_Members__c', sCount);
                              lineItem.put('Age_0_18_Member_Rate__c', sRate);
                              }else if(ABRsObj.Age__c == '19_20'){
                              lineItem.put('Age_19_of_Members__c', sCount);
                              lineItem.put('Age_19_Member_Rate__c', sRate);
                              lineItem.put('Age_20_of_Members__c', sCount);
                              lineItem.put('Age_20_Member_Rate__c', sRate);
                              }else if(ABRsObj.Age__c == '65_999'){
                              lineItem.put('Age_65_of_Members__c', sCount);
                              lineItem.put('Age_65_Member_Rate__c', sRate);
                              }else{
                              lineItem.put('Age_'+ABRsObj.Age__c+'_of_Members__c', sCount);
                              lineItem.put('Age_'+ABRsObj.Age__c+'_Member_Rate__c', sRate);
                              }
                              }*/
                            ABRsList.add(ABRsObj);
                        } //for
                    }
                } //for
            }
            System.debug('proposalObj&&&&&&&&&&&&&&&&&&' + proposalObj);
            //This is for renewals only
            if (proposalObj.Quote_Type__c.equals('Renewal') && qrh.quoteStatus.equals('Final Rates Updated') && proposalObj.Batch__c != null) {
                System.debug('Census Create');
                InsuranceRates.CensusResponse censusResponse = insuranceRates.CensusResponse;
                if (censusResponse != null) {
                    System.debug('Calling census response');
                    String status = UtilsGeneral.CreateCensusforRenewal(censusResponse, proposalObj);
                    if (!status.contains('Success') && !test.isrunningtest()) {
                        throw new APTSException('Error Creating Census: ' + status);
                    } else {
                        Apttus_Proposal__Proposal__c prop = [select id, name, Plan_Year__c, Effective_Date__c, Segment__c, Census__r.Size__c, Census__r.Total_Subscribers__c from Apttus_Proposal__Proposal__c where id = :proposalObj.id];
                        String planYear = prop.Plan_Year__c;
                        Date quoteEffectiveDate = prop.Effective_Date__c;
                        String quoteSegment = prop.Segment__c;
                        String size = prop.Census__r.Size__c;
                        Decimal totalSubscribers = prop.Census__r.Total_Subscribers__c;
                        
                        for (Facets_Product_ID__c fp :[select id, name, Plan_Year__c, Group_Size__c, Product__r.plan_type__c, Plan_ID__c, Term_Date__c, Start_Date__c, Embedded_Pediatric__c 
                                                       from Facets_Product_ID__c 
                                                       where Plan_ID__c in :planidSet
                                                       order by Start_Date__c Desc]) 
                        {
                            if(!lineItemToFacetsProdId.containsKey(fp.Plan_ID__c) ||
                               (lineItemToFacetsProdId.containsKey(fp.Plan_ID__c) && lineItemToFacetsProdId.get(fp.Plan_ID__c)==null)){
                                   system.debug('fp loop' + fp);
                                   if (quoteSegment != 'ASO Small Business' && fp.Product__r.plan_type__c == 'Medical' && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && quoteEffectiveDate >= fp.Start_Date__c && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                                       lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                                       system.debug('fp loop 1' + fp);
                                   } else if (quoteSegment != 'ASO Small Business' && (quoteEffectiveDate >= fp.Start_Date__c) && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && fp.Product__r.plan_type__c != 'Medical' && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                                       lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                                       system.debug('fp loop 2' + fp);
                                   } else if (quoteSegment == 'ASO Small Business' && fp.Product__r.plan_type__c == 'Medical' && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && quoteEffectiveDate >= fp.Start_Date__c && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                                       if ((!String.isBlank(size) && fp.Group_Size__c == '51 Plus' && size == '51 - 100') || (totalSubscribers> 51 && fp.Group_Size__c == '51 Plus')) {
                                           system.debug('fp loop 3' + fp);
                                           lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                                       } else if ((!String.isBlank(size) && fp.Group_Size__c == 'Under 51' && size == 'Under 51') || (totalSubscribers< 51 && fp.Group_Size__c == 'Under 51')) {
                                           system.debug('fp loop 4' + fp);
                                           lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                                       }
                                   } else if (quoteSegment == 'ASO Small Business' && fp.Product__r.plan_type__c != 'Medical' && (quoteEffectiveDate >= fp.Start_Date__c) && (planYear.equalsIgnoreCase(fp.Plan_Year__c) || fp.Plan_Year__c == 'Not Applicable') && ((quoteEffectiveDate <= fp.Term_Date__c) || fp.Term_Date__c == null)) {
                                       if ((!String.isBlank(size) && fp.Group_Size__c == '51 Plus' && size == '51 - 100') || (totalSubscribers> 51 && fp.Group_Size__c == '51 Plus') || (fp.Group_Size__c == 'Not Applicable')) {
                                           system.debug('fp loop 4' + fp);
                                           lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                                       } else if ((!String.isBlank(size) && fp.Group_Size__c == 'Under 51' && size == 'Under 51') || (totalSubscribers< 51 && fp.Group_Size__c == 'Under 51') || (fp.Group_Size__c == 'Not Applicable')) {
                                           system.debug('fp loop 5' + fp);
                                           lineItemToFacetsProdId.put(fp.Plan_ID__c, fp.id);
                                       }
                                   }
                                   
                               }
                        }
                        system.debug('lineItemToFacetsProdId' + lineItemToFacetsProdId);
                        for (Apttus_Config2__LineItem__c lineItem1 : lineItemList) {
                            system.debug('lineitem 889' + lineItem1);
                            if (lineItem.Apttus_Config2__LineStatus__c != 'Cancelled' && lineItem1.Apttus_Config2__OptionId__r != null && lineItemToFacetsProdId.containsKey(lineItem1.Apttus_Config2__OptionId__r.ProductCode)) {
                                lineItem1.Facets_Product__c = lineItemToFacetsProdId.get(lineItem1.Apttus_Config2__OptionId__r.ProductCode);
                                system.debug('lineitem 1366' + lineItem1);
                            } else if (lineItem.Apttus_Config2__LineStatus__c != 'Cancelled' && lineItem1.Apttus_Config2__ProductId__r != null && lineItemToFacetsProdId.containsKey(lineItem1.Apttus_Config2__ProductId__r.ProductCode)) {
                                lineItem1.Facets_Product__c = lineItemToFacetsProdId.get(lineItem1.Apttus_Config2__ProductId__r.ProductCode);
                                system.debug('lineitem 1369' + lineItem1);
                            }
                        }
                    }
                    System.debug('status ' + status);
                } else {
                    System.debug('censusResponse is null');
                }
            }
        } catch(Exception ex) {
            System.debug('Exception while parsing response:' + ex.getMessage());
            System.debug('StackTrace:' + ex.getStackTraceString());
            throw new APTSException(ex.getMessage());
        }
        //insert all objects in sequence***
        System.debug('1. Insert swResponse.');
        insert swResponse;
        //Update prior fields on Proposal object regardless if there is an error or not
        setProposalPriorFields(proposalObj);
        update proposalObj;
        if (!ignoreSWError) {
            if (!(swResponse.quoteStatus__c == 'Rates Provided' ||
                  swResponse.quoteStatus__c == 'New' ||
                  swResponse.quoteStatus__c == 'SW SGR Renewal Created' ||
                  swResponse.quoteStatus__c == 'SW UWA Renewal Created' ||
                  swResponse.quoteStatus__c == 'Final Rates Updated')) {
                throw new APTSException('<BR/>Invalid Stepwise Response Code :' + swResponse.responseCode__c +
                                        '<BR/>  Response Message :' + swResponse.responseMessage__c +
                                        '<BR/> Quote Status :' + swResponse.quoteStatus__c +
                                        '<BR/>  Quote Error:' + swResponse.quoteError__c +
                                        '<BR/>  Product Error:' + productErrorMsg +
                                        '<BR/>');
            }
        }
        if (productErrorMsg.length()> 0 && !ignoreSWError) {
            throw new APTSException(productErrorMsg);
        }
        if (proposalObj != null) {
            proposalObj.SENC2orSENC3T__c = isSCEN2oSCEN3;
            proposalObj.Is_HRA__c = isHRA;
            System.debug('8. Update proposal');
            proposalObj.Renewal_Detail_Error_Message__c = null;
            List<RecordType> recodTypeList = [SELECT Id FROM RecordType where Name = 'Proposal - Clone Locked'];
            proposalObj.RecordTypeId = recodTypeList[0].Id;
            //proposalObj.Cloned_Quote__c = false;
            update proposalObj;
            if (proposalObj.Census__c != null && proposalObj.Quote_Type__c.equals('Prospect')) {
                System.debug('9. Update Census');
                try {
                    if (proposalObj.Census__r.Status__c == 'Validated') {
                        Census__c census = new Census__c(ID = proposalObj.Census__c);
                        census.Status__c = 'Quoted';
                        update census;
                    }
                } catch(Exception ex) {
                    System.debug('Exception in updating Census:' + ex.getMessage());
                }
            }
        }
        if (!rateList.isEmpty()) {
            System.debug('2. Insert Rates - Count = ' + rateList.size());
            insert rateList;
        }
        if (!planInfoList.isEmpty()) {
            System.debug('3. Insert PlanInfo - Count = ' + planInfoList.size());
            insert planInfoList;
        }
        try {
            if (!productRateList.isEmpty()) {
                System.debug('4. Insert productRate - Count = ' + productRateList.size());
                insert productRateList;
                System.debug('4----. Insert productRate - Count = ' + productRateList.size());
            }
        } catch(Exception e) {
            System.debug('6. Insert productRate - Exception ' + e.getMessage());
        }
        //insert all ABRs
        try {
            if (!ABRsList.isEmpty()) {
                System.debug('5. Insert ABRs - Count = ' + ABRsList.size());
                insert ABRsList;
            }
        } catch(Exception e) {
            System.debug('6. Insert ABRs - Exception ' + e.getMessage());
        }
        System.debug('6. Insert ABRs - Count complete ');
        //update newLineItemList;
        //newLineItemList.updateprice();
        //update Line Item Rates
        System.debug('7. update Line Item Rates - ABR - Count = ' + lineItemList.size());
        if (!Test.isRunningTest()) {
            //Getting some managed packed error in Test classes.
            update lineItemList;
        }
        System.debug('8. Update lineItemList- Count complete ');
        if (productConfiguration != null) {
            System.debug('9. Update productConfiguration = ' + productConfiguration);
            update productConfiguration;
        }
        //Do Group Summary
        //Call Gropup Summary
        /*List<Apttus_Config2__SummaryGroup__c> summaryList = new List<Apttus_Config2__SummaryGroup__c>();
          summaryList = [SELECT Apttus_Config2__ExtendedPrice__c, Apttus_Config2__NetPrice__c, Apttus_Config2__AdjustedPrice__c
          FROM Apttus_Config2__SummaryGroup__c  where Apttus_Config2__ConfigurationId__c = :ProductConfigurationID];
          if (summaryList != null && summaryList.size() > 0) {
          for (Apttus_Config2__SummaryGroup__c summaryGroup : summaryList) {
          summaryGroup.Apttus_Config2__ExtendedPrice__c = totalAmount;
          summaryGroup.Apttus_Config2__NetPrice__c = totalAmount;
          summaryGroup.Apttus_Config2__AdjustedPrice__c = totalAmount;
          }
          update summaryList;
          }*/
        System.debug('10. Complete Parse Response ');
        return proposalObj;
    }
    public String validateMedicalEligible(String medicareEligible, String pReasonForMedicare) {
        if (medicareEligible == null || medicareEligible == 'N') return null;
        if (medicareEligible == 'Y' &&
            !medicareEligibleReasonSet.contains(pReasonForMedicare)) {
            pReasonForMedicare = 'Unknown';
        }
        return pReasonForMedicare;
    }
    public String formatDate(Date inputDate) {
        if (inputDate != null) {
            Datetime dTime = Datetime.newInstance(inputDate.year(), inputDate.month(), inputDate.day());
            return dTime.format('MM/dd/yyyy');
        } else {
            return null;
        }
    }
    public String getString(Decimal inputDecimal, Integer scale) {
        if (inputDecimal != null) {
            return inputDecimal.setScale(scale).toPlainString();
        } else {
            return null;
        }
    }
    public String checkNULL(String inputStr) {
        if (inputStr == null) {
            return '';
        }
        return inputStr;
    }
    //Expected Input formatt '2015-05-27T10:24:19.378000Z'
    public Datetime parseDateTime(String inputDatetime) {
        System.debug('parseDateTime inputDatetime = ' + inputDatetime);
        if (inputDatetime == null) {
            return null;
        }
        Datetime dTime = null;
        try {
            dTime = DateTime.valueOfGmt(inputDatetime.replaceAll('T', ' '));
        } catch(Exception ex) {
            System.debug('Exception in parsing datetime:' + ex.getMessage());
        }
        return dTime;
    }
    public Decimal parseDecimal(String inputDecimal) {
        System.debug('parseDecimal inputDecimal = ' + inputDecimal);
        if (inputDecimal == null) {
            return null;
        }
        Decimal decimalNum = 0.0;
        try {
            decimalNum = Decimal.valueOf(inputDecimal.replace(',', ''));
        } catch(Exception ex) {
            System.debug('Exception in parsing Decimal:' + ex.getMessage());
        }
        return decimalNum;
    }
    public void sendSystemLevelErorMail(Apttus_Proposal__Proposal__c proposal) {
        // Use Organization Wide Address
        List<OrgWideEmailAddress> owalist = new List<OrgWideEmailAddress> ();
        OrgWideEmailAddress owa = new OrgWideEmailAddress();
        owalist = [select id, Address, DisplayName from OrgWideEmailAddress Where Address = 'cbcsalesautomation@capbluecross.com' LIMIT 1];
        if (owalist.size() > 0) {
            owa = owalist.get(0);
        }
        List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage> ();
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        string body = 'IT Support team, </br></br></br>' +
        'The following Salesforce Quote/Proposal  has encountered an error receiving Rates from Stepwise. Please refer the Quote/Proposal and Transaction Id below for reference:' + '</br></br></br>' +
        'Quote/Proposal #: ' + proposal.Name + '</br>' +
        'Stepwise Error ' + proposal.Renewal_Detail_Error_Message__c + '</br>' +
        'Thank you,' + '</br></br></br>' +
        'Salesforce Team';
        List<APTS_Stepwise_Error_Email_List__c> emailList = [SELECT Email_List__c FROM APTS_Stepwise_Error_Email_List__c];
        String sendTo = emailList[0].Email_List__c;
        mail.setOrgWideEmailAddressId(owa.id);
        mail.setSubject('Stepwise Error');
        mail.setSaveAsActivity(false);
        mail.setReplyTo('cbcsalesautomation@capbluecross.com');
        String[] sendToAddressList = sendTo.split(';');
        //mail.setSenderDisplayName('Salesforce.com');
        mail.setToAddresses(sendToAddressList);
        mail.setHtmlBody(body);
        mails.add(mail);
        Messaging.sendEmail(mails);
    }
    public String convertDecimalToStringWithComma(Decimal amount) {
        List<String> args = new String[] { '0', 'number', '###,###,##0.00' };
        String sAmount = String.format(amount.format(), args);
        System.debug('amount.format() ' + amount.format());
        System.debug('sAmount ' + sAmount);
        Integer index = sAmount.indexOf('.');
        System.debug('index ' + index);
        if (index != - 1) {
            String afterDecimal = sAmount.substring(index + 1);
            System.debug('afterDecimal ' + afterDecimal);
            if (afterDecimal.length() == 1) {
                sAmount = sAmount + '0';
            }
        } else {
            sAmount = sAmount + '.00';
        }
        return sAmount;
    }
    public id insertSWResponseError(String transactionId, DateTime startTime, Id prodConfigId, Boolean noResponse)
    {
        DateTime endTime = Datetime.now();
        Decimal timeTakenForResponse = (endTime.getTime() - startTime.getTime()) / 1000.0;
        SW_Response__c swResponseError = new SW_Response__c();
        swResponseError.ProductConfiguration__c = prodConfigId;
        swResponseError.timeTakenForResponse__c = timeTakenForResponse;
        swResponseError.submissionDateTime__c = startTime;
        swResponseError.responseDateTime__c = endTime;
        swResponseError.applicationId__c = 'InsuranceRates_V2.0_WEBSFAPP';
        swResponseError.responseMessage__c = 'Error';
        if (noResponse) {
            swResponseError.responseMessage__c = 'Error : No Response from Stepwise. <br/> TransactionId = ' + transactionId;
        }
        swResponseError.transactionId__c = transactionId;
        insert swResponseError;
        return swResponseError.id;
    }
}